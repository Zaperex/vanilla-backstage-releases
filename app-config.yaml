app:
  title: Scaffolded Backstage App
  baseUrl: http://localhost:3000

organization:
  name: My Company

backend:
  # Used for enabling authentication, secret is shared by all backend plugins
  # See https://backstage.io/docs/auth/service-to-service-auth for
  # information on the format
  # auth:
  #   keys:
  #     - secret: ${BACKEND_SECRET}
  baseUrl: http://localhost:7007
  listen:
    port: 7007
    # Uncomment the following host directive to bind to specific interfaces
    # host: 127.0.0.1
  csp:
    connect-src: ["'self'", 'http:', 'https:']
    # Content-Security-Policy directives follow the Helmet format: https://helmetjs.github.io/#reference
    # Default Helmet Content-Security-Policy values can be removed by setting the key to false
  cors:
    origin: http://localhost:3000
    methods: [GET, HEAD, PATCH, POST, PUT, DELETE]
    credentials: true
  # This is for local development only, it is not recommended to use this in production
  # The production database configuration is stored in app-config.production.yaml
  database:
    client: better-sqlite3
    connection: ':memory:'
  # workingDirectory: /tmp # Use this to configure a working directory for the scaffolder, defaults to the OS temp-dir

integrations:
  # Plugin: GitHub
  github:
    - host: github.com
      # This is a GitHub App. You can find out how to generate this file, and more information
      # about setting up the GitHub integration here: https://backstage.io/docs/integrations/github/github-apps
      apps:
        # - $include: github-app-backstage-showcase-credentials.yaml
        - appId: ${GITHUB_APP_APP_ID}
          webhookUrl: ${GITHUB_APP_WEBHOOK_URL}
          clientId: ${GITHUB_APP_CLIENT_ID}
          clientSecret: ${GITHUB_APP_CLIENT_SECRET}
          webhookSecret: ${GITHUB_APP_WEBHOOK_SECRET}
          privateKey: |
            ${GITHUB_APP_PRIVATE_KEY}

proxy:
  '/quay/api':
    target: 'https://quay.io'
    headers:
      X-Requested-With: 'XMLHttpRequest'
      # Uncomment the following line to access a private Quay Repository using a token
      # Authorization: 'Bearer <YOUR TOKEN>'
    changeOrigin: true
    # Change to "false" in case of using self hosted quay instance with a self-signed certificate
    secure: true

  '/acr/api':
    target: ${ACR_SERVER_API_URL}
    changeOrigin: true
    headers:
      # If you use Basic Token for authorization, please append the 'Basic' with at the beginning of your ACR_AUTH_TOKEN
      # Append 'Bearer' instead if you are using an OAuth2 Bearer Token
      Authorization: ${ACR_AUTH_TOKEN}
    # Change to "false" in case of using self hosted artifactory instance with a self-signed certificate
    secure: ${ACR_SECURE}
  '/jfrog-artifactory/api':
    target: ${ARTIFACTORY_URL}
    headers:
      Authorization: Bearer ${ARTIFACTORY_TOKEN}
    # Change to "false" in case of using self hosted artifactory instance with a self-signed certificate
    secure: ${ARTIFACTORY_SECURE}
  '/nexus-repository-manager':
    target: ${NEXUS_REPOSITORY_MANAGER_URL}
    headers:
      X-Requested-With: 'XMLHttpRequest'
      # Uncomment the following line to access a private Nexus Repository Manager using a token
      # Authorization: 'Bearer ${NEXUS_REPOSITORY_MANAGER_TOKEN}'
    changeOrigin: true
    # Change to "false" in case of using self hosted Nexus Repository Manager instance with a self-signed certificate
    secure: ${NEXUS_REPOSITORY_MANAGER_SECURE}

# Reference documentation http://backstage.io/docs/features/techdocs/configuration
# Note: After experimenting with basic setup, use CI/CD to generate docs
# and an external cloud storage when deploying TechDocs for production use-case.
# https://backstage.io/docs/features/techdocs/how-to-guides#how-to-migrate-from-techdocs-basic-to-recommended-deployment-approach
techdocs:
  builder: 'local' # Alternatives - 'external'
  generator:
    runIn: 'docker' # Alternatives - 'local'
  publisher:
    type: 'local' # Alternatives - 'googleGcs' or 'awsS3'. Read documentation for using alternatives.

auth:
  # see https://backstage.io/docs/auth/ to learn about auth providers
  environment: development
  providers:
    # Plugin: GitHub
    github:
      development:
        clientId: ${GITHUB_APP_CLIENT_ID}
        clientSecret: ${GITHUB_APP_CLIENT_SECRET}
scaffolder:
  # see https://backstage.io/docs/features/software-templates/configuration for software template options

catalog:
  import:
    entityFilename: catalog-info.yaml
    pullRequestBranchName: backstage-integration
  rules:
    - allow: [Component, System, Group, Resource, Location, Template, API]
  locations:
    # Local example data, file locations are relative to the backend process, typically `packages/backend`
    - type: file
      target: ../../examples/entities.yaml

    # Local example template
    - type: file
      target: ../../examples/template/template.yaml
      rules:
        - allow: [Template]

    # Local example organizational data
    - type: file
      target: ../../examples/org.yaml
      rules:
        - allow: [User, Group]
    - type: url
      target: https://github.com/janus-idp/backstage-showcase/blob/main/catalog-entities/all.yaml

    ## Uncomment these lines to add more example data
    # - type: url
    #   target: https://github.com/backstage/backstage/blob/master/packages/catalog-model/examples/all.yaml

    ## Uncomment these lines to add an example org
    # - type: url
    #   target: https://github.com/backstage/backstage/blob/master/packages/catalog-model/examples/acme-corp.yaml
    #   rules:
    #     - allow: [User, Group]
  providers:
    aap:
      dev:
        baseUrl: ${AAP_BASE_URL}
        authorization: 'Bearer ${AAP_AUTH_TOKEN}'
        owner: ${AAP_OWNER}
        system: ${AAP_SYSTEM}
    # Plugin: Keycloak
    keycloakOrg:
      default:
        baseUrl: ${KEYCLOAK_BASE_URL}
        loginRealm: ${KEYCLOAK_LOGIN_REALM}
        realm: ${KEYCLOAK_REALM}
        clientId: ${KEYCLOAK_CLIENT_ID}
        clientSecret: ${KEYCLOAK_CLIENT_SECRET}

# Plugin: Kubernetes, OCM
kubernetes:
  customResources:
    - group: 'tekton.dev'
      apiVersion: 'v1beta1'
      plural: 'pipelines'
    - group: 'tekton.dev'
      apiVersion: 'v1beta1'
      plural: 'pipelineruns'
    - group: 'tekton.dev'
      apiVersion: 'v1beta1'
      plural: 'taskruns'
    - group: 'route.openshift.io'
      apiVersion: 'v1'
      plural: 'routes'
    - group: 'org.eclipse.che'
      apiVersion: 'v2'
      plural: 'checlusters'
  serviceLocatorMethod:
    type: 'multiTenant'
  clusterLocatorMethods:
    - type: 'config'
      clusters:
        - name: ${K8S_CLUSTER_NAME}
          url: ${K8S_CLUSTER_URL}
          authProvider: 'serviceAccount'
          skipTLSVerify: true
          serviceAccountToken: ${K8S_CLUSTER_TOKEN}
quay:
  # The UI url for Quay, used to generate the link to Quay
  uiUrl: 'https://quay.io'

argocd:
  username: ${ARGOCD_USERNAME}
  password: ${ARGOCD_PASSWORD}
  appLocatorMethods:
    - type: 'config'
      instances:
        - name: argoInstance1
          url: ${ARGOCD_INSTANCE1_URL}
          token: ${ARGOCD_AUTH_TOKEN}
        - name: argoInstance2
          url: ${ARGOCD_INSTANCE2_URL}
          token: ${ARGOCD_AUTH_TOKEN2}

enabled:
  keycloak: ${KEYCLOAK_ENABLED}
  ansible: ${ANSIBLE_ENABLED}
  argocd: ${ARGOCD_ENABLED}
  ocm: ${OCM_ENABLED}
  kubernetes: ${K8S_ENABLED}
  techdocs: ${TECHDOCS_ENABLED}
